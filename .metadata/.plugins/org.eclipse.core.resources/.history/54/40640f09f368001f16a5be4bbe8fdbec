package com.lcomputerstudy.example.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.lcomputerstudy.example.domain.Board;
import com.lcomputerstudy.example.domain.User;
import com.lcomputerstudy.example.domain.Pagination;
import com.lcomputerstudy.example.domain.SearchParam;
import com.lcomputerstudy.example.service.BoardService;
import com.lcomputerstudy.example.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@org.springframework.stereotype.Controller
public class Controller {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired UserService userservice;
	@Autowired BoardService boardservice;
	@Autowired PasswordEncoder passwordEncoder;
	
	// Model은 컨트롤러와 뷰 사이의 데이터를 전달하는 역할을 수행
	@GetMapping("/list")
	public String list(Model model,
						@RequestParam(value="page", required=false, defaultValue="1") int page,
						@ModelAttribute SearchParam searchparam) {
		int count = 0;
		Pagination pagination = new Pagination();
	    
	    if ((searchparam.getSearchOption() == null || searchparam.getSearchOption().isEmpty()) && 
	    	(searchparam.getSearchKeyword() == null || searchparam.getSearchKeyword().isEmpty())) {
	    	count = boardservice.countBoard();
	    } else {
	    	count = boardservice.countSearchBoard(searchparam);
	    }
	    
	    pagination.setPage(page);
	    pagination.setCount(count);
	    pagination.build();
	    
	    Map<String, Object> params = new HashMap<>();
	    params.put("searchOption", searchparam.getSearchOption());
	    params.put("searchKeyword", searchparam.getSearchKeyword());
	    params.put("boardsPerPage", pagination.getboardsPerPage());
	    params.put("perPage", pagination.getPerpage());
	    
	    List<Board> list;
	    if ((searchparam.getSearchOption() == null || searchparam.getSearchOption().isEmpty()) && 
		    (searchparam.getSearchKeyword() == null || searchparam.getSearchKeyword().isEmpty())) {
		   	list = boardservice.selectBoardList(pagination);
		   } else {
		    list = boardservice.searchBoard(params);
		}
	    
	    model.addAttribute("list", list);
	    model.addAttribute("pagination", pagination);
	    model.addAttribute("searchparam", searchparam);
	    
	    return "/list";
	}
	
	//게시물 제목 클릭시 상세보기
	@GetMapping("/detailBoard")
	public String detailBoard(@RequestParam("bId") int bId, @RequestParam(value = "page", defaultValue = "1") int page, 
								@ModelAttribute SearchParam searchparam,
								Model model) {
		Board boardID = boardservice.selectBoardBid(bId);
		model.addAttribute("board", boardID);
		model.addAttribute("page", page);
		model.addAttribute("searchparam", searchparam);
		return "/detail_board";
	}
	
	@PostMapping("/deleteBoard")
	public String deleteBoard(@RequestParam("bId") int bId) {
		
		// 현재 인증된 사용자 정보 가져오기
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		
		// 현재 사용자 권한 확인 (admin 권한 여부 확인)
		boolean isAdmin = authentication.getAuthorities().stream()
										.anyMatch(r -> r.getAuthority().equals("ROLE_ADMIN"));
		
		// 현재 사용자의 u_id 가져오기
		String currentUserId = authentication.getName();
		
		// 게시물 정보 가져오기
		Board board = boardservice.selectBoardBid(bId);
		
		// 확인용 코드
		System.out.println("Board username: " + board.getUsername());
		System.out.println("Current user ID: " + currentUserId);
		
		// 게시물의 작성자 u_id와 현재 로그인한 사용자의 u_id를 비교
		if (board != null) {
			
			String boardWriterId = board.getUsername();
			
			if(isAdmin || currentUserId.equals(boardWriterId)) {
				boardservice.deleteBoard(bId);
			} else {
				return "redirect:/denied"; // 권한이 없는 경우 접근 거부 페이지로 리다이렉트
			}
		} 
		return "redirect:/list";
	}
	
	// 게시물 내용을 가져와서 수정하기페이지로 연결
	// 게시물의 u_id와 로그인 u_id가 같다면 수정할 수 있게 권한 부여
	@GetMapping("/editBoard")
	public String editBoard(@RequestParam("bId") int bId, Model model) {
		// 현재 인증된 사용자 정보 가져오기
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		
		// 현재 사용자의 u_id 가져오기
		String currentUserId = authentication.getName();
		
		Board board = boardservice.selectBoardBid(bId);
		
		// 게시물의 작성자 u_id와 현재 로그인한 사용자의 u_id를 비교
		if (board != null) {
			String boardWriterId = board.getUsername();
			if(currentUserId.equals(boardWriterId)) {
				model.addAttribute("board", board);
			} else {
				return "/denied";
			}
		}
		return "/edit_board";
	}
	
	// 게시물 수정한 내용들을 데이터베이스에 반영시키고 업데이트
	@PostMapping("/updateBoard")
	public String updateBoard(@ModelAttribute Board board) {
		boardservice.updateBoard(board);
		return "redirect:/list";
	}
	
	// 사용자가 입력할 게시물 폼
	@Secured({"ROLE_USER", "ROLE_ADMIN"})
	@GetMapping("/insertBoard")
	public String insertBoardform() {
		//굳이 model 작업으로 새 board를 만들지 않아도 내부적으로 반영되기때문에
		//그냥 작성할 폼만 띄워주는 Get메서드임
		//model.addAttribute("board", new Board());
		return "/insert_board";
	}
	
	// 입력받은 데이터를 데이터베이스에 반영
	@Secured({"ROLE_USER", "ROLE_ADMIN"})
	@PostMapping("/insertBoard")
	public String insertBoard(@ModelAttribute Board board, Authentication authentication) {
		boardservice.insertBoard(board);
		return "redirect:/list";
	}
	
	@GetMapping("/")
	public String home() {
		logger.debug("디버그입니다");
		logger.info("인포입니다");
		
		return "/index";
	}
	
	@GetMapping("/beforeSignUp") 
	public String beforeSignUp() {
		return "/signup";
	}
	
	@PostMapping("/signup")
	public String signup(@ModelAttribute User user) {
		//비밀번호 암호화
		String encodedPassword = passwordEncoder.encode(user.getPassword());
		//String encodedPassword = new BCryptPasswordEncoder().encode(user.getPassword());
	      
	    //유저 데이터 세팅
	    user.setPassword(encodedPassword);
	    user.setAccountNonExpired(true);
	    user.setEnabled(true);
	    user.setAccountNonLocked(true);
	    user.setCredentialsNonExpired(true);
	    user.setAuthorities(AuthorityUtils.createAuthorityList("ROLE_USER"));
	    
	    /*List<GrantedAuthority> authorities = new ArrayList<>();
	    authorities.add(new SimpleGrantedAuthority("ROLE_USER"));
	    authorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
	    user.setAuthorities(authorities);*/
	      
	    //유저 생성
	    userservice.createUser(user);
	    //유저 권한 생성
	    userservice.createAuthorities(user);
	    return "/login";
	}
	
	@GetMapping("/login")
	public String beforeLogin(Model model) {
		return "/login";
	}
	
	@Secured({"ROLE_ADMIN"})
	@GetMapping("/admin")
	public String admin(Model model) {
		return "/admin";
	}
	   
	@Secured({"ROLE_USER"})
	@GetMapping("/user/info")
	public String userInfo(Model model) {  
	   return "/user_info";
	}
	   
	@GetMapping("/denied")
	public String denied(Model model) {
	   return "/denied";
	}
}
